
TaskManager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000510  000005a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  00800062  00800062  000005a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003af  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020b  00000000  00000000  00000a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000268  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001cc  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022d  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039a  00000000  00000000  00001279  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  8a:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <schedule>:
} task;

volatile static int tasksToDo = 0;
volatile static task tasks[MAX_NUMBER_OF_TASKS];

void schedule(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <schedule+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <schedule+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62

	for (int i=0; i<MAX_NUMBER_OF_TASKS; i++){					// checking and incrementing loop
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	58 c0       	rjmp	.+176    	; 0x154 <schedule+0xc2>
		tasks[i].counter++;											// time passes, increase every task's counter
  a4:	29 81       	ldd	r18, Y+1	; 0x01
  a6:	3a 81       	ldd	r19, Y+2	; 0x02
  a8:	c9 01       	movw	r24, r18
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	82 1b       	sub	r24, r18
  b8:	93 0b       	sbc	r25, r19
  ba:	87 59       	subi	r24, 0x97	; 151
  bc:	9f 4f       	sbci	r25, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	ac 01       	movw	r20, r24
  c6:	4f 5f       	subi	r20, 0xFF	; 255
  c8:	5f 4f       	sbci	r21, 0xFF	; 255
  ca:	29 81       	ldd	r18, Y+1	; 0x01
  cc:	3a 81       	ldd	r19, Y+2	; 0x02
  ce:	c9 01       	movw	r24, r18
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	82 1b       	sub	r24, r18
  de:	93 0b       	sbc	r25, r19
  e0:	87 59       	subi	r24, 0x97	; 151
  e2:	9f 4f       	sbci	r25, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	51 83       	std	Z+1, r21	; 0x01
  e8:	40 83       	st	Z, r20
		if (tasks[i].counter % tasks[i].interval == 0) tasksToDo++;	// check if one of the functions need to be executed now
  ea:	29 81       	ldd	r18, Y+1	; 0x01
  ec:	3a 81       	ldd	r19, Y+2	; 0x02
  ee:	c9 01       	movw	r24, r18
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	82 1b       	sub	r24, r18
  fe:	93 0b       	sbc	r25, r19
 100:	87 59       	subi	r24, 0x97	; 151
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	40 81       	ld	r20, Z
 108:	51 81       	ldd	r21, Z+1	; 0x01
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	3a 81       	ldd	r19, Y+2	; 0x02
 10e:	c9 01       	movw	r24, r18
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	82 1b       	sub	r24, r18
 11e:	93 0b       	sbc	r25, r19
 120:	88 59       	subi	r24, 0x98	; 152
 122:	9f 4f       	sbci	r25, 0xFF	; 255
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	28 2f       	mov	r18, r24
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	ca 01       	movw	r24, r20
 12e:	b9 01       	movw	r22, r18
 130:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__udivmodhi4>
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	49 f4       	brne	.+18     	; 0x14a <schedule+0xb8>
 138:	80 91 62 00 	lds	r24, 0x0062
 13c:	90 91 63 00 	lds	r25, 0x0063
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 63 00 	sts	0x0063, r25
 146:	80 93 62 00 	sts	0x0062, r24
volatile static int tasksToDo = 0;
volatile static task tasks[MAX_NUMBER_OF_TASKS];

void schedule(){

	for (int i=0; i<MAX_NUMBER_OF_TASKS; i++){					// checking and incrementing loop
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	91 05       	cpc	r25, r1
 15c:	0c f4       	brge	.+2      	; 0x160 <schedule+0xce>
 15e:	a2 cf       	rjmp	.-188    	; 0xa4 <schedule+0x12>
		tasks[i].counter++;											// time passes, increase every task's counter
		if (tasks[i].counter % tasks[i].interval == 0) tasksToDo++;	// check if one of the functions need to be executed now
	}

}
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <addTask>:

void addTask(uint8_t numberOfTask, uint8_t interval, void (*foo)(void*), void* args){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <addTask+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <addTask+0x8>
 176:	00 d0       	rcall	.+0      	; 0x178 <addTask+0xa>
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	6a 83       	std	Y+2, r22	; 0x02
 180:	5c 83       	std	Y+4, r21	; 0x04
 182:	4b 83       	std	Y+3, r20	; 0x03
 184:	3e 83       	std	Y+6, r19	; 0x06
 186:	2d 83       	std	Y+5, r18	; 0x05

	tasks[numberOfTask].foo = foo;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	c9 01       	movw	r24, r18
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	82 1b       	sub	r24, r18
 19e:	93 0b       	sbc	r25, r19
 1a0:	8c 59       	subi	r24, 0x9C	; 156
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	2b 81       	ldd	r18, Y+3	; 0x03
 1a6:	3c 81       	ldd	r19, Y+4	; 0x04
 1a8:	fc 01       	movw	r30, r24
 1aa:	31 83       	std	Z+1, r19	; 0x01
 1ac:	20 83       	st	Z, r18
	tasks[numberOfTask].args = args;
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	c9 01       	movw	r24, r18
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	82 1b       	sub	r24, r18
 1c4:	93 0b       	sbc	r25, r19
 1c6:	8a 59       	subi	r24, 0x9A	; 154
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	2d 81       	ldd	r18, Y+5	; 0x05
 1cc:	3e 81       	ldd	r19, Y+6	; 0x06
 1ce:	fc 01       	movw	r30, r24
 1d0:	31 83       	std	Z+1, r19	; 0x01
 1d2:	20 83       	st	Z, r18
	tasks[numberOfTask].interval = interval;
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	c9 01       	movw	r24, r18
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	82 1b       	sub	r24, r18
 1ea:	93 0b       	sbc	r25, r19
 1ec:	88 59       	subi	r24, 0x98	; 152
 1ee:	9f 4f       	sbci	r25, 0xFF	; 255
 1f0:	2a 81       	ldd	r18, Y+2	; 0x02
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
	tasks[numberOfTask].counter = 0;
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	c9 01       	movw	r24, r18
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	82 1b       	sub	r24, r18
 20c:	93 0b       	sbc	r25, r19
 20e:	87 59       	subi	r24, 0x97	; 151
 210:	9f 4f       	sbci	r25, 0xFF	; 255
 212:	fc 01       	movw	r30, r24
 214:	11 82       	std	Z+1, r1	; 0x01
 216:	10 82       	st	Z, r1

}
 218:	26 96       	adiw	r28, 0x06	; 6
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <execute>:
void changeTask(uint8_t numberOfTask, void (*foo)(void*), void* args){
	tasks[numberOfTask].foo = foo;
	tasks[numberOfTask].args = args;
}

void execute(){
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	00 d0       	rcall	.+0      	; 0x230 <execute+0x6>
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62

	while (1){

		while (tasksToDo == 0){}	  // empty loop for idling (when ther;'s no task to do)
 234:	00 00       	nop
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	90 91 63 00 	lds	r25, 0x0063
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	d1 f3       	breq	.-12     	; 0x236 <execute+0xc>
		cli();						  // turn interrupts off, for synchronicity's sake
 242:	f8 94       	cli

		for (int i=0; i<MAX_NUMBER_OF_TASKS; i++)								// checking loop
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	19 82       	std	Y+1, r1	; 0x01
 248:	7c c0       	rjmp	.+248    	; 0x342 <execute+0x118>
		{
			if ( tasks[i].interval > 0 && tasks[i].counter >= tasks[i].interval )	// check if there's a task to execute
 24a:	29 81       	ldd	r18, Y+1	; 0x01
 24c:	3a 81       	ldd	r19, Y+2	; 0x02
 24e:	c9 01       	movw	r24, r18
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	82 1b       	sub	r24, r18
 25e:	93 0b       	sbc	r25, r19
 260:	88 59       	subi	r24, 0x98	; 152
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	fc 01       	movw	r30, r24
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	09 f4       	brne	.+2      	; 0x26e <execute+0x44>
 26c:	65 c0       	rjmp	.+202    	; 0x338 <execute+0x10e>
 26e:	29 81       	ldd	r18, Y+1	; 0x01
 270:	3a 81       	ldd	r19, Y+2	; 0x02
 272:	c9 01       	movw	r24, r18
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	82 1b       	sub	r24, r18
 282:	93 0b       	sbc	r25, r19
 284:	87 59       	subi	r24, 0x97	; 151
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	fc 01       	movw	r30, r24
 28a:	40 81       	ld	r20, Z
 28c:	51 81       	ldd	r21, Z+1	; 0x01
 28e:	29 81       	ldd	r18, Y+1	; 0x01
 290:	3a 81       	ldd	r19, Y+2	; 0x02
 292:	c9 01       	movw	r24, r18
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	82 1b       	sub	r24, r18
 2a2:	93 0b       	sbc	r25, r19
 2a4:	88 59       	subi	r24, 0x98	; 152
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	88 2f       	mov	r24, r24
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	48 17       	cp	r20, r24
 2b2:	59 07       	cpc	r21, r25
 2b4:	08 f4       	brcc	.+2      	; 0x2b8 <execute+0x8e>
 2b6:	40 c0       	rjmp	.+128    	; 0x338 <execute+0x10e>
			{																		// if there is...
				tasks[i].counter -= tasks[i].interval;									// decrease its counter by its interval (1 execution)
 2b8:	29 81       	ldd	r18, Y+1	; 0x01
 2ba:	3a 81       	ldd	r19, Y+2	; 0x02
 2bc:	c9 01       	movw	r24, r18
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	82 1b       	sub	r24, r18
 2cc:	93 0b       	sbc	r25, r19
 2ce:	87 59       	subi	r24, 0x97	; 151
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	fc 01       	movw	r30, r24
 2d4:	40 81       	ld	r20, Z
 2d6:	51 81       	ldd	r21, Z+1	; 0x01
 2d8:	29 81       	ldd	r18, Y+1	; 0x01
 2da:	3a 81       	ldd	r19, Y+2	; 0x02
 2dc:	c9 01       	movw	r24, r18
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	82 1b       	sub	r24, r18
 2ec:	93 0b       	sbc	r25, r19
 2ee:	88 59       	subi	r24, 0x98	; 152
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	88 2f       	mov	r24, r24
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	48 1b       	sub	r20, r24
 2fc:	59 0b       	sbc	r21, r25
 2fe:	29 81       	ldd	r18, Y+1	; 0x01
 300:	3a 81       	ldd	r19, Y+2	; 0x02
 302:	c9 01       	movw	r24, r18
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	82 1b       	sub	r24, r18
 312:	93 0b       	sbc	r25, r19
 314:	87 59       	subi	r24, 0x97	; 151
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	fc 01       	movw	r30, r24
 31a:	51 83       	std	Z+1, r21	; 0x01
 31c:	40 83       	st	Z, r20
				currentTaskToDo = i;														// remember which task it was
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	80 93 60 00 	sts	0x0060, r24
				tasksToDo--;															// decrease number of task that still need executing
 324:	80 91 62 00 	lds	r24, 0x0062
 328:	90 91 63 00 	lds	r25, 0x0063
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	90 93 63 00 	sts	0x0063, r25
 332:	80 93 62 00 	sts	0x0062, r24
				break;																	// finally, leave the loop for imminent execution
 336:	0b c0       	rjmp	.+22     	; 0x34e <execute+0x124>
	while (1){

		while (tasksToDo == 0){}	  // empty loop for idling (when ther;'s no task to do)
		cli();						  // turn interrupts off, for synchronicity's sake

		for (int i=0; i<MAX_NUMBER_OF_TASKS; i++)								// checking loop
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	9a 81       	ldd	r25, Y+2	; 0x02
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	91 05       	cpc	r25, r1
 34a:	0c f4       	brge	.+2      	; 0x34e <execute+0x124>
 34c:	7e cf       	rjmp	.-260    	; 0x24a <execute+0x20>
				tasksToDo--;															// decrease number of task that still need executing
				break;																	// finally, leave the loop for imminent execution
			}
		}

		sei();												// turn interrupts on again
 34e:	78 94       	sei
		tasks[currentTaskToDo].foo(tasks[currentTaskToDo].args);	// execute the remembered task
 350:	80 91 60 00 	lds	r24, 0x0060
 354:	28 2f       	mov	r18, r24
 356:	33 27       	eor	r19, r19
 358:	27 fd       	sbrc	r18, 7
 35a:	30 95       	com	r19
 35c:	c9 01       	movw	r24, r18
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	82 1b       	sub	r24, r18
 36c:	93 0b       	sbc	r25, r19
 36e:	8c 59       	subi	r24, 0x9C	; 156
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	fc 01       	movw	r30, r24
 374:	40 81       	ld	r20, Z
 376:	51 81       	ldd	r21, Z+1	; 0x01
 378:	80 91 60 00 	lds	r24, 0x0060
 37c:	28 2f       	mov	r18, r24
 37e:	33 27       	eor	r19, r19
 380:	27 fd       	sbrc	r18, 7
 382:	30 95       	com	r19
 384:	c9 01       	movw	r24, r18
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	82 1b       	sub	r24, r18
 394:	93 0b       	sbc	r25, r19
 396:	8a 59       	subi	r24, 0x9A	; 154
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	91 81       	ldd	r25, Z+1	; 0x01
 3a0:	fa 01       	movw	r30, r20
 3a2:	09 95       	icall
		currentTaskToDo = -1;
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	80 93 60 00 	sts	0x0060, r24

	}
 3aa:	00 00       	nop

void execute(){

	while (1){

		while (tasksToDo == 0){}	  // empty loop for idling (when ther;'s no task to do)
 3ac:	43 cf       	rjmp	.-378    	; 0x234 <execute+0xa>

000003ae <__vector_10>:
#include "taskManager.h"

/**
* scheduling functions, call at every interrupt
*/ 
ISR(TIMER0_COMP_vect){
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	00 90 5f 00 	lds	r0, 0x005F
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	schedule();						
 3da:	0e 94 49 00 	call	0x92	; 0x92 <schedule>
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	7f 91       	pop	r23
 3f0:	6f 91       	pop	r22
 3f2:	5f 91       	pop	r21
 3f4:	4f 91       	pop	r20
 3f6:	3f 91       	pop	r19
 3f8:	2f 91       	pop	r18
 3fa:	0f 90       	pop	r0
 3fc:	00 92 5f 00 	sts	0x005F, r0
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <task1>:
volatile int task2int = 0;

/**
* Dummy task functions #1
*/
void task1(void* args){				
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	00 d0       	rcall	.+0      	; 0x40c <task1+0x6>
 40c:	cd b7       	in	r28, 0x3d	; 61
 40e:	de b7       	in	r29, 0x3e	; 62
 410:	9a 83       	std	Y+2, r25	; 0x02
 412:	89 83       	std	Y+1, r24	; 0x01
	task1int++;
 414:	80 91 9c 00 	lds	r24, 0x009C
 418:	90 91 9d 00 	lds	r25, 0x009D
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 9d 00 	sts	0x009D, r25
 422:	80 93 9c 00 	sts	0x009C, r24
}
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <task2>:

/**
* Dummy task functions #2
*/
void task2(void* args){				
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <task2+0x6>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
 43a:	9a 83       	std	Y+2, r25	; 0x02
 43c:	89 83       	std	Y+1, r24	; 0x01
	task2int+=2;
 43e:	80 91 9e 00 	lds	r24, 0x009E
 442:	90 91 9f 00 	lds	r25, 0x009F
 446:	02 96       	adiw	r24, 0x02	; 2
 448:	90 93 9f 00 	sts	0x009F, r25
 44c:	80 93 9e 00 	sts	0x009E, r24
}
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <setupTimer>:

/**
* Setup atmega32's clock for interrupts every 1ms
*/
void setupTimer(){
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	cd b7       	in	r28, 0x3d	; 61
 460:	de b7       	in	r29, 0x3e	; 62
	
	TCCR0 |= (1<<WGM01) | (0<<WGM00);	// set clock type as CTC
 462:	83 e5       	ldi	r24, 0x53	; 83
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	23 e5       	ldi	r18, 0x53	; 83
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	28 60       	ori	r18, 0x08	; 8
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
	OCR0 = 250;							// set Output Compare Register - together with prescaler this will give us 
 474:	8c e5       	ldi	r24, 0x5C	; 92
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	2a ef       	ldi	r18, 0xFA	; 250
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
											// interrupt every 1ms
	sei();								// turn interrupts on
 47e:	78 94       	sei
	TIMSK |= (1<<OCIE0);				// set interrupts co compare
 480:	89 e5       	ldi	r24, 0x59	; 89
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	29 e5       	ldi	r18, 0x59	; 89
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	22 60       	ori	r18, 0x02	; 2
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	TCCR0 |= (1<<CS00) | (1<<CS01 );	// set clock prescaler at 64*250 = 16,000; 16MHz * 16,000 = 1KHZ;
 492:	83 e5       	ldi	r24, 0x53	; 83
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	23 e5       	ldi	r18, 0x53	; 83
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	23 60       	ori	r18, 0x03	; 3
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
	
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <main>:



int main(void)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	setupTimer();							
 4b2:	0e 94 2d 02 	call	0x45a	; 0x45a <setupTimer>
	addTask(0, 5, task1, (void*)0);
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	43 e0       	ldi	r20, 0x03	; 3
 4bc:	52 e0       	ldi	r21, 0x02	; 2
 4be:	65 e0       	ldi	r22, 0x05	; 5
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 b7 00 	call	0x16e	; 0x16e <addTask>
	addTask(1, 10, task2, (void*)0);
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	48 e1       	ldi	r20, 0x18	; 24
 4cc:	52 e0       	ldi	r21, 0x02	; 2
 4ce:	6a e0       	ldi	r22, 0x0A	; 10
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 b7 00 	call	0x16e	; 0x16e <addTask>
	execute();
 4d6:	0e 94 15 01 	call	0x22a	; 0x22a <execute>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <__udivmodhi4>:
 4e4:	aa 1b       	sub	r26, r26
 4e6:	bb 1b       	sub	r27, r27
 4e8:	51 e1       	ldi	r21, 0x11	; 17
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <__udivmodhi4_ep>

000004ec <__udivmodhi4_loop>:
 4ec:	aa 1f       	adc	r26, r26
 4ee:	bb 1f       	adc	r27, r27
 4f0:	a6 17       	cp	r26, r22
 4f2:	b7 07       	cpc	r27, r23
 4f4:	10 f0       	brcs	.+4      	; 0x4fa <__udivmodhi4_ep>
 4f6:	a6 1b       	sub	r26, r22
 4f8:	b7 0b       	sbc	r27, r23

000004fa <__udivmodhi4_ep>:
 4fa:	88 1f       	adc	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	5a 95       	dec	r21
 500:	a9 f7       	brne	.-22     	; 0x4ec <__udivmodhi4_loop>
 502:	80 95       	com	r24
 504:	90 95       	com	r25
 506:	bc 01       	movw	r22, r24
 508:	cd 01       	movw	r24, r26
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
